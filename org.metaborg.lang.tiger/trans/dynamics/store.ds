module store

imports dynamics/values 

signature // lvalue 
  sorts LValue
  arrows  
    LValue -lval-> Address
  variables
    lv : LValue
    
signature // environment
  sorts Id
  sort aliases 
    Address = Int
    Env = Map(Id, Address)
  components 
    E : Env
  arrows
    lookup(Id) --> Int
    bind(Id, Address) --> Env
    
rules

  E |- lookup(a) --> E[a].
  
  E |- bind(x, a) --> {x |--> a, E}.
  
signature // heap
  sort aliases
    Heap = Map(Address, V)
  components
    H : Heap   
  arrows
    read(Address) --> V
    allocate(V) --> Int
    write(Address, V) --> V
    
rules

  read(a) :: H --> H[a].
  
  write(a, v) :: H --> v :: H {a |--> v, H}.

  allocate(v) --> a
  where
    fresh => a;
    write(a, v) --> _.
    