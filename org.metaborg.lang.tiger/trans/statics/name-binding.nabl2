module name-binding

imports signatures/-
imports nabl-lib

signature
  name resolution
    labels 
      P I 
    well-formedness 
      P* . I*
    order
      D < P, 
      D < I, 
      I < P

rules

  init ^ (s) := 
    new s,               // generate the root scope
    Var{"print"} <- s,   // built-in function print
    Type{"int"} <- s,    // declare primitive type int
    Type{"string"} <- s. // declare primitive type string

rules // declarations

  // Nested scopes: The scope of a variable or parameter includes the
  // bodies of any function definitions in that scope. That is, access
  // to variables in outer scopes is permitted, as in Pascal and Algol
  
  /* Local redeclarations: A variable or function declaration may be 
    hidden by the redeclaration of the same name (as a variable or
    function) in a smaller scope; for example, this function prints
     "6 7 6 8 6" when applied to 5:
     
    let 
      function f(v : int) =
        let var v := 6
         in print(v);
            let  var v := 7 in print(v) end;
            print(v);
            let var v := 8 in print(v) end;
            print(v)
        end
     in f(4)
    end
  */
  

  [[ Let(blocks, exps) ^ (s) ]] :=
     new s',     // declare a new scope for the names introduced by the let
     s' -P-> s,  // declare s as its parent scope
     new s_body, // scope for body of the let
     Decs[[ blocks ^ (s', s_body) ]],
     Map[[ exps ^ (s_body) ]].
     
  Decs[[ [] ^ (s, s_body) ]] :=
    s_body -P-> s.
    
  Decs[[ [block | blocks] ^ (s_outer, s_body) ]] :=
    new s', s' -P-> s_outer,
    [[ block ^ (s', s_outer) ]],
    Decs[[ blocks ^ (s', s_body) ]].

rules // type declarations

  // Types: In the expression [let ... typedecs ... in exps end] the
  // scope of a type identifier starts at the beginning of the 
  // consecutive sequence of type declarations defining it and lasts
  // until the end. The includes the headers and bodies of any functions
  // with the scope.
  
  // Name spaces: There are two different name spaces: one for types,
  // and one for functions and variables. A type [a] can be "in scope"
  // at the same time as a variable [a] or a function [a], but 
  // variables and functions of the same name cannot both be in 
  // scope simultaneously (one will hide the other).
    
  [[ TypeDecs(tdecs) ^ (s, s_outer) ]] := 
     Map[[ tdecs ^ (s) ]].
     
  [[ TypeDec(x, t) ^ (s) ]] :=
     Type{x} <- s,
     [[ t ^ (s) ]].
     
   // type declarations in a sequence are mutually recursive
    
rules // variable declarations

  // Local variables: In the expression [let ... vardec ... in exp end], 
  // the scope of the declared variable starts just after its vardec 
  // and lasts until the end.

  [[ VarDec(x, t, e) ^ (s, s_outer) ]] :=
     Var{x} <- s, 
     [[ t ^ (s_outer) ]],
     [[ e ^ (s_outer) ]].
    
  [[ VarDecNoInit(x, t) ^ (s, s_outer) ]] :=
     Var{x} <- s, 
     [[ t ^ (s_outer) ]].

rules // function declarations

  // Parameters: In [function id(... id1: id2 ...) = exp] the
  // scope of the parameter id1 lasts throughout the function
  // body exp
        
  [[ FunDecs(fdecs) ^ (s, s_outer) ]] :=
     Map2[[ fdecs ^ (s, s_outer) ]].
     
  [[ FunDec(f, args, t, e) ^ (s, s_outer) ]] :=
     Var{f} <- s, // declare f 
     new s',      // declare a new scope for body of function
     s' -P-> s,   // make lexical environment accessible in body
     Map2[[ args ^ (s', s_outer) ]],
     [[ t ^ (s_outer) ]],
     [[ e ^ (s') ]].
     
  [[ FArg(x, t) ^ (s, s_outer) ]] :=
     Var{x} <- s, // declare argument x as a variable declaration
     [[ t ^ (s_outer) ]].
     
rules // types

  [[ Tid(x) ^ (s) ]] :=
     Type{x} -> s, 
     Type{x} |-> d | error $[Type [x] not declared].
     
  [[ Tp(t) ^ (s) ]] := 
     [[ t ^ (s) ]].
  
  [[ NoTp() ^ (s) ]] := true.
      
  [[ NameTy(t) ^ (s) ]] :=
     [[ t ^ (s) ]].
     
  [[ RecordTy(fields) ^ (s) ]] := 
     new s',
     Map2[[ fields ^ (s', s) ]].
     // todo: connect record scope to the type
     
  [[ Field(x, t) ^ (s, s_outer) ]] :=
     Field{x} <- s,
     [[ t ^ (s_outer) ]].
     
  [[ ArrayTy(t) ^ (s) ]] := 
     [[ t ^ (s) ]].

rules // variable references
  
  [[ Var(x) ^ (s) ]] :=
     Var{x} -> s,  // declare x as variable reference
     Var{x} |-> d. // check that x resolves to a declaration
 
rules // function calls
    
  [[ Call(Var(f), exps) ^ (s) ]] :=
     Var{f} -> s,  // declare f as a function reference
     Var{f} |-> d | error $[Function [f] not declared], 
     // check that f resolves to a declaration
     Map[[ exps ^ (s) ]].
     
  [[ Record(t, inits) ^ (s) ]] :=
     [[ t ^ (s) ]],
     new s_rec,
     Map[[ inits ^ (s_rec, s) ]].
     
  [[ InitField(x, e) ^ (s_rec, s) ]] :=
     Field{x} -> s_rec,
     Field{x} |-> d,
     [[ e ^ (s) ]].
     
  [[ Array(t, e1, e2) ^ (s) ]] :=
     [[ t ^ (s) ]],
     [[ e1 ^ (s) ]],
     [[ e2 ^ (s) ]].
     
  // Sum, SumIndex
  
rules // statements

  [[ Assign(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].  
     
  [[ Seq(es) ^ (s) ]] :=
     Map[[ es ^ (s) ]].
     
  [[ If(e1, e2, e3) ^ (s) ]] := 
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]], [[ e3 ^ (s) ]].
     
  [[ IfThen(e1, e2) ^ (s) ]] := 
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
     
  [[ While(e1, e2) ^ (s) ]] := 
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
     
rules // binding statements

  [[ For(Var(x), e1, e2, e3) ^ (s) ]] := 
     new s', 
     s' -P-> s,
     Var{x} <- s',
     [[ e1 ^ (s) ]], // x not bound in loop bounds
     [[ e2 ^ (s) ]], 
     [[ e3 ^ (s') ]]. // x bound in body
     
  [[ Break() ^ (s) ]] := true.
          
rules // record and array indexing
     
  [[ FieldVar(e, f) ^ (s) ]] :=
     [[ e ^ (s) ]].
     
  [[ Subscript(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]],
     [[ e2 ^ (s) ]].
       
     
rules // literals    

  [[ Int(i)    ^ (s) ]] := true.  
  [[ String(s) ^ (s) ]] := true.
  [[ NilExp()  ^ (s) ]] := true.
  
rules // operators
     
  [[ Uminus(e) ^ (s) ]] :=
     [[ e ^ (s) ]].
     
  [[ Power(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
     
  [[ Divide(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
     
  [[ Times(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
     
  [[ Minus(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
     
  [[ Plus(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
     
  [[ CPlus(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
     
  [[ CMinus(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
        
  [[ Eq(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
        
  [[ Neq(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
        
  [[ Gt(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
        
  [[ Lt(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
        
  [[ Geq(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
        
  [[ Leq(e1, e2) ^ (s) ]] :=
     [[ e1 ^ (s) ]], [[ e2 ^ (s) ]].
     
