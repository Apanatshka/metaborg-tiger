module static-semantics

imports signatures/-
imports nabl-lib

signature
  name resolution
    namespaces
      Type Var Field Loop
    labels 
      P I 
    well-formedness 
      P* . I*
    order
      D < P, 
      D < I, 
      I < P
signature     
  types
    UNIT()
    INT()
    STRING()
    NIL()
    RECORD(scope)
    ARRAY(type, scope)
    FUN(List(type), type)

rules

  init ^ (s) : ty_init := 
    new s,               // the root scope
    
    Type{"int"} <- s,    // declare primitive type int
    Type{"int"} : INT() !!,
    
    Type{"string"} <- s, // declare primitive type string
    Type{"string"} : STRING() !!,
    
    // standard library
    
    Var{"print"} <- s,   
    Var{"print"} : FUN([STRING()], UNIT()) !!,
    
    Var{"flush"} <- s,   
    Var{"flush"} : FUN([], UNIT()) !!,
    
    Var{"getchar"} <- s,   
    Var{"getchar"} : FUN([], STRING()) !!,
    
    Var{"ord"} <- s,   
    Var{"ord"} : FUN([STRING()], INT()) !!,
    
    Var{"chr"} <- s,   
    Var{"chr"} : FUN([INT()], STRING()) !!,
    
    Var{"size"} <- s,   
    Var{"size"} : FUN([STRING()], INT()) !!,
    
    Var{"substring"} <- s,   
    Var{"substring"} : FUN([STRING(), INT(), INT()], STRING()) !!,
    
    Var{"concat"} <- s,   
    Var{"concat"} : FUN([STRING(), STRING()], UNIT()) !!,
    
    Var{"not"} <- s,   
    Var{"not"} : FUN([INT()], INT()) !!,
    
    Var{"exit"} <- s,   
    Var{"exit"} : FUN([INT()], UNIT()) !!.
    
rules // top-level module

  [[ Mod(e) ^ (s) : ty ]] :=
     [[ e ^ (s) : ty ]].
 
rules // let

  // Nested scopes: The scope of a variable or parameter includes the
  // bodies of any function definitions in that scope. That is, access
  // to variables in outer scopes is permitted, as in Pascal and Algol
  
  /* Local redeclarations: A variable or function declaration may be 
    hidden by the redeclaration of the same name (as a variable or
    function) in a smaller scope; for example, this function prints
     "6 7 6 8 6" when applied to 5:
     
    let 
      function f(v : int) =
        let var v := 6
         in print(v);
            let  var v := 7 in print(v) end;
            print(v);
            let var v := 8 in print(v) end;
            print(v)
        end
     in f(4)
    end
  */
  

  [[ Let(blocks, exps) ^ (s) : ty ]] :=
     new s_body, // scope for body of the let
     distinct D(s_body),
     Decs[[ blocks ^ (s, s_body) ]],
     Seq[[ exps ^ (s_body) : ty ]].
     
  Decs[[ [] ^ (s_outer, s_body) ]] :=
    s_body -P-> s_outer.
    
  Decs[[ [block] ^ (s_outer, s_body) ]] :=
    s_body -P-> s_outer,
    Dec[[ block ^ (s_body, s_outer) ]].
    
  Decs[[ [block | blocks@[_|_]] ^ (s_outer, s_body) ]] :=
    new s_dec, 
    s_dec -P-> s_outer,
    distinct D(s_dec) | error $[duplicate declaration] @NAMES,
    Dec[[ block ^ (s_dec, s_outer) ]],
    Decs[[ blocks ^ (s_dec, s_body) ]].

rules // sequence

  Seq[[ [] ^ (s) : UNIT() ]] := 
    true.  
   
  Seq[[ [e] ^ (s) : ty ]] :=
    [[ e ^ (s) : ty ]].
    
  Seq[[ [ e | es@[_|_] ] ^ (s) : ty ]] := 
    [[ e ^ (s) : ty' ]], Seq[[ es ^ (s) : ty ]].
    
    // note: pattern overlaps with previous rule; depends
    // on order of evaluation; should check that es is not empty
    
rules // type declarations

  // Types: In the expression [let ... typedecs ... in exps end] the
  // scope of a type identifier starts at the beginning of the 
  // consecutive sequence of type declarations defining it and lasts
  // until the end. The includes the headers and bodies of any functions
  // with the scope.
  
  // Name spaces: There are two different name spaces: one for types,
  // and one for functions and variables. A type [a] can be "in scope"
  // at the same time as a variable [a] or a function [a], but 
  // variables and functions of the same name cannot both be in 
  // scope simultaneously (one will hide the other).
    
  Dec[[ TypeDecs(tdecs) ^ (s, s_outer) ]] := 
     Map[[ tdecs ^ (s) ]].
     
  [[ TypeDec(x, t) ^ (s) ]] :=
     Type{x} <- s, Type{x} : ty !, 
     [[ t ^ (s) : ty ]].
     
   // type declarations in a sequence are mutually recursive
    
rules // variable declarations

  // Local variables: In the expression [let ... vardec ... in exp end], 
  // the scope of the declared variable starts just after its vardec 
  // and lasts until the end.

  Dec[[ VarDec(x, t, e) ^ (s, s_outer) ]] :=
     Var{x} <- s, Var{x} : ty1 !, 
     [[ t ^ (s_outer) : ty1 ]],
     [[ e ^ (s_outer) : ty2 ]],
     ty2 <? ty1 | error $[type mismatch] @ e.
    
  Dec[[ VarDecNoInit(x, t) ^ (s, s_outer) ]] :=
     Var{x} <- s, Var{x} : ty !, 
     [[ t ^ (s_outer) : ty ]].

//rules // function declarations

  // Parameters: In [function id(... id1: id2 ...) = exp] the
  // scope of the parameter id1 lasts throughout the function
  // body exp
        
  Dec[[ FunDecs(fdecs) ^ (s, s_outer) ]] :=
     Map2[[ fdecs ^ (s, s_outer) ]].
     
  [[ FunDec(f, args, t, e) ^ (s, s_outer) ]] :=
     Var{f} <- s, // declare f 
     Var{f} : FUN(tys, ty) !, // type of f
     new s_fun,      // declare a new scope for body of function
     s_fun -P-> s,   // make lexical environment accessible in body
     distinct D(s_fun) | error $[duplicate argument] @ NAMES, 
     MapTs2[[ args ^ (s_fun, s_outer) : tys ]],
     [[ t ^ (s_outer) : ty ]],
     [[ e ^ (s_fun) : ty_body ]],
     ty == ty_body| error $[return type does not match body] @ t.
     
  [[ FArg(x, t) ^ (s_fun, s_outer) : ty ]] :=
     Var{x} <- s_fun, // declare argument x as a variable declaration
     Var{x} : ty !,
     [[ t ^ (s_outer) : ty ]].
     
rules // types

  [[ Tid(x) ^ (s) : ty ]] :=
     Type{x} -> s, 
     Type{x} |-> d | error $[Type [x] not declared],
     d : ty.
     
  [[ Tp(t) ^ (s) : ty ]] := 
     [[ t ^ (s) : ty ]].
  
  [[ NoTp() ^ (s) : ty ]] := 
     true.
      
  [[ NameTy(t) ^ (s) : ty ]] :=
     [[ t ^ (s) : ty ]].

rules // record type

  [[ RecordTy(fields) ^ (s) : ty ]] := 
     new s_rec,
     ty == RECORD(s_rec),
     NIL() <! ty,
     distinct D(s_rec)/Field | error $[Duplicate declaration of field [NAME]] @ NAMES,
     Map2[[ fields ^ (s_rec, s) ]].
     
  [[ Field(x, t) ^ (s_rec, s_outer) ]] :=
     Field{x} <- s_rec,
     Field{x} : ty !,
     [[ t ^ (s_outer) : ty ]].

rules // array type
     
  [[ ArrayTy(t) ^ (s) : ARRAY(ty, s')]] := 
     new s', // unique token to distinghuish the array type
     [[ t ^ (s) : ty ]].

rules // variable references
  
  [[ Var(x) ^ (s) : ty ]] :=
     Var{x} -> s,  // declare x as variable reference
     Var{x} |-> d, // check that x resolves to a declaration
     d : ty.       // type of declaration is type of reference
 
rules // function calls
    
  [[ Call(Var(f), exps) ^ (s) : ty ]] :=
     Var{f} -> s,  // declare f as a function reference
     Var{f} |-> d | error $[Function [f] not declared], 
     d : FUN(tys, ty) | error $[Function expected] ,
     MapTs[[ exps ^ (s) : tys ]].
     
     // todo: error messages per argument

rules // record creation   
   
  [[ r@Record(t, inits) ^ (s) : ty ]] :=
     [[ t ^ (s) : ty ]],
     ty == RECORD(s_rec) | error $[record type expected],
     new s_use, s_use -I-> s_rec,
     D(s_rec)/Field subseteq R(s_use)/Field | error $[Field [NAME] not initialized] @r,
     Map2[[ inits ^ (s_use, s) ]].
         
  [[ InitField(x, e) ^ (s_use, s) ]] :=
     Field{x} -> s_use,
     Field{x} |-> d,
     d : ty1,
     [[ e ^ (s) : ty2 ]],
     ty2 <? ty1 | error $[type mismatch].

rules // array creation
     
  [[ Array(t, e1, e2) ^ (s) : ty ]] :=
     [[ t ^ (s) : ty ]],
     ty == ARRAY(ty_elem, s_arr) | error $[array type expected],
     [[ e1 ^ (s) : INT() ]], // length
     [[ e2 ^ (s) : ty_elem ]]. // initial value
     
rules // statements

  [[ Assign(e1, e2) ^ (s) : UNIT() ]] :=
     [[ e1 ^ (s) : ty1 ]], [[ e2 ^ (s) : ty2 ]],
     ty2 <? ty1 | error $[type mismatch] @ e2.  
     
  [[ Seq(es) ^ (s) : ty ]] :=
     Seq[[ es ^ (s) : ty ]].
     
  [[ If(e1, e2, e3) ^ (s) : ty2 ]] := 
     [[ e1 ^ (s) : INT() ]], 
     [[ e2 ^ (s) : ty2 ]], 
     [[ e3 ^ (s) : ty3 ]],
     ty2 == ty3 | error $[branches should have same type].
     
  [[ IfThen(e1, e2) ^ (s) : UNIT() ]] := 
     [[ e1 ^ (s) : INT() ]], 
     [[ e2 ^ (s) : ty ]].
     
  [[ While(e1, e2) ^ (s) : UNIT() ]] := 
     new s', s' -P-> s,
     Loop{""} <- s',
     [[ e1 ^ (s) : INT() ]], 
     [[ e2 ^ (s') : ty ]].

  [[ stm@For(Var(x), e1, e2, e3) ^ (s) : UNIT() ]] := 
     new s_for, 
     s_for -P-> s,
     Var{x} <- s_for,
     Var{x} : INT(),
     Loop{Break()@stm} <- s_for,
     [[ e1 ^ (s) : INT() ]], // x not bound in loop bounds
     [[ e2 ^ (s) : INT() ]], 
     [[ e3 ^ (s_for) : ty ]]. // x bound in body
     
  [[ stm@Break() ^ (s) : UNIT() ]] := 
     Loop{Break()@stm} -> s,
     Loop{Break()@stm} |-> d.
          
rules // record field access
     
  [[ FieldVar(e, f) ^ (s) : ty ]] :=
     [[ e ^ (s) : ty_e ]], 
     ty_e == RECORD(s_rec),
     new s_use, s_use -I-> s_rec, 
     Field{f} -> s_use,
     Field{f} |-> d,
     d : ty.
     
rules // array indexing
     
  [[ Subscript(e1, e2) ^ (s) : ty ]] :=
     [[ e1 ^ (s) : ty_arr ]],
     ty_arr == ARRAY(ty, s_arr),
     [[ e2 ^ (s) : INT() ]].
     
rules // literals    

  [[ Int(i)    ^ (s) : INT() ]] := true.  
  [[ String(str) ^ (s) : STRING() ]] := true.
  [[ NilExp()  ^ (s) : NIL() ]] := true.
  
rules // operators
     
  [[ Uminus(e) ^ (s) : INT() ]] :=
     [[ e ^ (s) : INT() ]].
          
  [[ Divide(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : INT() ]], [[ e2 ^ (s): INT() ]].
     
  [[ Times(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : INT() ]], [[ e2 ^ (s): INT() ]].
     
  [[ Minus(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : INT() ]], [[ e2 ^ (s): INT() ]].
     
  [[ Plus(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : INT() ]], [[ e2 ^ (s): INT() ]].
        
  [[ Eq(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : ty1 ]], [[ e2 ^ (s): ty2 ]],
     ty1 == ty2.
        
  [[ Neq(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : ty1 ]], [[ e2 ^ (s): ty2 ]],
     ty1 == ty2.
        
  [[ Gt(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : ty1 ]], [[ e2 ^ (s): ty2 ]],
     ty1 == ty2.
        
  [[ Lt(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : ty1 ]], [[ e2 ^ (s): ty2 ]],
     ty1 == ty2.
        
  [[ Geq(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : ty1 ]], [[ e2 ^ (s): ty2 ]],
     ty1 == ty2.
        
  [[ Leq(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : ty1 ]], [[ e2 ^ (s): ty2 ]],
     ty1 == ty2.
        
  [[ Or(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : ty1 ]], [[ e2 ^ (s): ty2 ]],
     ty1 == ty2.
        
  [[ And(e1, e2) ^ (s) : INT() ]] :=
     [[ e1 ^ (s) : ty1 ]], [[ e2 ^ (s): ty2 ]],
     ty1 == ty2.
     
     
