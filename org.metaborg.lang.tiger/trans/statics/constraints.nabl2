module constraints

imports signatures/-

signature     
  types
    TC1()
    TC2(type)
    TC3(scope)
    TC4(type, scope, type)
    
rules

//  [[ C(t1, ..., tn) ^ (s) ]] := C1, ..., Cn.
  
[[ Constr(e1, e2) ^ (s) ]] :=
  
[[ e ^ (s) : ty ]], // generate constraints for sub-term
//  C1, C2 // conjuction of constraints
new s,  // generate a new scope
     
NS{x} <- s, // declaration of name x in namespace NS
NS{x} -> s, // reference of name x in namespace NS
     
s ---> s',    // unlabeled scope edge from s to s'
s -L-> s',  // scope edge from s to s' labeled L
     
NS{x} |-> d, // resolve reference x in namespace NS to declaration d

distinct D(s)/NS, // declarations for NS in s should be distinct

D(s1) subseteq R(s2), // name set 

D(s_rec)/Field subseteq R(s_use)/Field | error $[Field [NAME] not initialized] @r,


[[ e ^ (s) : ty ]], // subterm e has type ty under scope s

o : ty, // occurrence o has type ty

o : ty !, // with priority

ty1 == ty2, // ty1 and ty2 should unify

ty <! ty2, // declare ty1 a subtype of ty2

ty1 <? ty2, // is ty1 a subtype of ty1?
     
false | error $[something is wrong], // custom error message
false | warning $[does not look right], // custom warning
     
false, // always fails
true. // always succeeds
  
  