module Tiger-Declarations

imports Tiger-Expressions	
imports Tiger-Statements
imports Tiger-Lexicals

sorts Declarations

context-free syntax

  Exp.Let = <
    let 
      <Dec*> 
     in <{Exp ";"}*> 
    end
  > 
    
  Dec.TypeDecs     = <<{TypeDec "\n"}+>> {longest-match}
  
  TypeDec.TypeDec  = <type <Id> = <Type>> 
  
  Dec.VarDec       = <var <Id> <TypeAn> := <Exp>> 
  Dec.VarDecNoInit = <var <Id> <TypeAn>> 
  Dec.FunDecs      = <<{FunDec "\n"}+>>  {longest-match}
  
  FunDec.FunDec = <
    function <Id> ( <{FArg ", "}*> ) <TypeAn> = 
      <Exp>
  >
  
  FArg.FArg = <<Id> <TypeAn>>
  
  Declarations.Declarations = <declarations <Dec*>> 
 
context-free syntax // type annotations

  TypeAn.NoTp   =  
  TypeAn.Tp     = <: <TypeId>> 
  
context-free syntax // type expressions

  Type.NameTy   = TypeId 
  Type.RecordTy = <{ <{Field ","}*> }> 
  Field.Field   = <<Id> : <TypeId>> 
  Type.ArrayTy  = <array of <TypeId>> 
  TypeId.Tid    = Id 

context-free syntax // semantic types

  Ty.INT      = <INT> 
  Ty.STRING   = <STRING> 
  Ty.NIL      = <NIL> 
  Ty.UNIT     = <UNIT> 
  Ty.NAME     = <NAME <Id>> 
  Ty.RECORD   = <RECORD <Id>>
  Ty.ARRAY    = <ARRAY <Ty> <Id>> 
  Ty.FUN      = <FUN ( <{Ty ","}*> ) <Ty>> 
