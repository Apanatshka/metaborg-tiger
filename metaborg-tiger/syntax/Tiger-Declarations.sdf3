module Tiger-Declarations

imports Tiger-Expressions	
imports Tiger-Statements
imports Tiger-Lexicals

sorts Declarations

context-free syntax

  Exp.Let          = <let <Dec*> in <{Exp ";"}*> end> 
  //Dec.TypeDecs     = <<TypeDec+>>   
  Dec              = TypeDec
  TypeDec.TypeDec  = <type <Id> = <Type>> 
  
  Dec.VarDec       = <var <Id> <TypeAn> := <Exp>> 
  Dec.VarDecNoInit = <var <Id> <TypeAn>> 
  //Dec.FunDecs      = <<FunDec+>>  
  Dec              = FunDec
  
  FunDec.FunDec    = <function <Id> ( <{FArg ","}*> ) <TypeAn> = <Exp>>
  FArg.FArg        = <<Id> <TypeAn>>
  
  Declarations.Declarations = <declarations <Dec*>> 
 
context-free syntax

  TypeAn.NoTp   =  
  TypeAn.Tp     = <: <TypeId>> 
  Type.NameTy   = TypeId 
  Type.RecordTy = <{ <{Field ","}*> }> 
  Field.Field   = <<Id> : <TypeId>> 
  Type.ArrayTy  = <array of <TypeId>> 
  TypeId.Tid    = Id 

context-free syntax

  Ty.INT      = <INT> 
  Ty.STRING   = <STRING> 
  Ty.NIL      = <NIL> 
  Ty.UNIT     = <UNIT> 
  Ty.NAME     = <NAME <Id>> 
  Ty.RECORD   = <RECORD { <{FIELD ","}*> } <Id>> 
  Ty.ARRAY    = <ARRAY <Ty> <Id>> 
  Ty.FUN      = <FUN ( <{Ty ","}*> ) <Ty>> 
  
  FIELD.FIELD = <<Id> : <Ty>> 
  
  Exp.Typed    = <<Exp> :: <Ty>> 
  LValue.Typed = <<LValue> :: <Ty>> {avoid}
