module tiger

imports src-gen/ds-signatures/Tiger-sig
imports semantics/runtime/primitives
imports semantics/runtime/values
imports semantics/runtime/environment
imports semantics/runtime/store
imports src-gen/ds-signatures/Tiger-Literals-sig

signature
  constructors 
    IntV  : Int -> V 
    BoolV : Bool -> V
    AddrV : Int -> V
    NilV  : V
    ClosV : List(FArg) * Exp * Env -> V
  arrows 
    Exp --> V
    Dec --> V
    List(Dec) --> V
    List(Exp) --> V
    List(FArg) --> List(Id)
    
rules // sequences

  [] : List(Dec) --> U().
  
  [dec | decs] : List(Dec) --> v
  where dec --> _; decs --> v.
    
  [] : List(Exp) --> U().
  
  [exp] : List(Exp) --> v
  where exp --> v.
  
  [exp | exps] : List(Exp) --> v
  where exp --> _; exps --> v.
  
  [] : List(FArg) --> [].
  
  [FArg(x, _) | args] : List(FArg) --> [x | xs]
  where args --> xs.
  
rules // let and declarations

  E |- Let(decs, exps) --> v
  where 
    decs :: E --> _ :: E';
    E' |- exps --> v.
    
  VarDec(x, _, e) --> U()
  where e --> v;  allocate(v) --> loc; bindVar(x, AddrV(loc)) --> _.
  
  VarDecNoInit(x, _) --> U()
  where allocate(NilV()) --> loc; bindVar(x, AddrV(loc)) --> _.
  
  FunDec(f, args, _, e) :: E --> U() :: E'
  where bindVar(f, ClosV(args, e, E)) --> _ :: E'.
  
  // NOTE: mutually recursive declarations
  
rules // expressions

  Int(i) --> IntV(str2int(i)).
  
  Plus(IntV(i), IntV(j)) --> IntV(plusI(i, j)). 
  
  True() --> BoolV(true).
  False() --> BoolV(false).
  
  And(e1, e2) --> If(e1, e2, False()).
  Or(e1, e2) --> If(e1, True(), e2).
  
rules // functions

  Call(Var(f), vs: List(V)) --> v
  where readVar(f) --> ClosV(args, e, E);
        bindVars(args, vs) --> E';
        Env {E', E} |- e --> v.
  
rules // variables
  
  Assign(Var(x), v) --> v
  where readVar(x) --> AddrV(loc); write(loc, v) --> _.
  
rules // statements

  Seq(exps) --> v
  where exps --> v.
  
  If(BoolV(true), e2, _ ) --> e2.
  If(BoolV(false), _, e3) --> e3.
  
  While(e1, e2) --> If(e1, Seq([e2, While(e1, e2)]), Seq([])).
   
  For(Var(x), e1, e2, e3) --> 
    Let([VarDec(x, NoTp(), e1), VarDec(y, NoTp(), e2)],[
      While(Lt(Var(x), Var(y)), 
        Seq([e3, Assign(Var(x), Plus(Var(x), Int("1")))]))
    ])
  where fresh => y.  
  
  ForStride(Var(x), e1, e2, e3, e4) -->
    Let([VarDec(x, NoTp(), e1), VarDec(y, NoTp(), e2), VarDec(z, NoTp(), e3)],[
      While(Lt(Var(x), Var(y)), 
        Seq([e4, Assign(Var(x), Plus(Var(x), Var(z)]))
    ])
  where fresh => y; fresh => z.  
  